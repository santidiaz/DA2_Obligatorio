// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessEntities.Event", b =>
                {
                    b.Property<int>("EventOID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("SportOID");

                    b.Property<int?>("Team1TeamOID");

                    b.Property<int?>("Team2TeamOID");

                    b.HasKey("EventOID");

                    b.HasIndex("SportOID");

                    b.HasIndex("Team1TeamOID");

                    b.HasIndex("Team2TeamOID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BusinessEntities.Sport", b =>
                {
                    b.Property<int>("SportOID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("SportOID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("BusinessEntities.Team", b =>
                {
                    b.Property<int>("TeamOID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<byte[]>("Photo");

                    b.Property<int?>("SportOID");

                    b.HasKey("TeamOID");

                    b.HasIndex("SportOID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BusinessEntities.User", b =>
                {
                    b.Property<int>("UserOID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("UserOID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessEntities.Event", b =>
                {
                    b.HasOne("BusinessEntities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportOID");

                    b.HasOne("BusinessEntities.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1TeamOID");

                    b.HasOne("BusinessEntities.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2TeamOID");
                });

            modelBuilder.Entity("BusinessEntities.Team", b =>
                {
                    b.HasOne("BusinessEntities.Sport")
                        .WithMany("TeamsList")
                        .HasForeignKey("SportOID");
                });
#pragma warning restore 612, 618
        }
    }
}
